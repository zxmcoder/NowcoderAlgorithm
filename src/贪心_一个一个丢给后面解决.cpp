/*
题目描述 Description
有 N 堆纸牌，编号分别为 1，2，…, N。每堆上有若干张，但纸牌总数必为 N 的倍数。可以在任一堆上取若于张纸牌，然后移动。
　　移牌规则为：在编号为 1 堆上取的纸牌，只能移到编号为 2 的堆上；在编号为 N 的堆上取的纸牌，只能移到编号为 N-1 的堆上；其他堆上取的纸牌，可以移到相邻左边或右边的堆上。
　　现在要求找出一种移动方法，用最少的移动次数使每堆上纸牌数都一样多。

　　例如 N=4，4 堆纸牌数分别为：
　　①　9　②　8　③　17　④　6
　　移动3次可达到目的：
　　从 ③ 取 4 张牌放到 ④ （9 8 13 10） -> 从 ③ 取 3 张牌放到 ②（9 11 10 10）-> 从 ② 取 1 张牌放到①（10 10 10 10）。

输入描述 Input Description
第一行N（N 堆纸牌，1 <= N <= 100）
第二行A1 A2 … An （N 堆纸牌，每堆纸牌初始数，l<= Ai <=10000）

输出描述 Output Description
输出至屏幕。格式为：
所有堆均达到相等时的最少移动次数。‘

样例输入 Sample Input
4
9 8 17 6

样例输出 Sample Output
3
 */
#include<bits/stdc++.h>
using namespace std;

int main(){
    int sum=0,n;
    cin>>n;
    vector<int> v(n);
    for(int i=0;i<n;++i){
        cin>>v[i];
        sum+=v[i];
    }
    int avg=sum/n;
    int ans=0;
    for(int i=0;i<n-1;++i){
        if(avg!=v[i]){
            ans++;
            v[i+1]+=v[i]-avg;
        }
    }
    cout<<ans;
    return 0;
}
//其实仔细想想，基本上所有的贪心算法都是从左到右的一次循环，左边已经确定下来了，即使可以从左右两边操作，也只能从右边操作，而第一次是明显只能从右边操作的。